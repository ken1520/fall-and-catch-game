<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Fall and Catch - Game</title>

    <link
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/css/style.css" />

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script type="module">
      import zim from 'https://zimjs.org/cdn/016/zim_game';

      let playerScore = 0;
      const GAME_TIME = 60;

      new Frame(
        'game',
        null,
        null,
        light,
        dark,
        ready,
      );
      function ready() {
        const pods = new Container().addTo().noMouse();

        const inter = interval({ min: 0.2, max: 0.8 }, () => {
          const pod = new Circle(20, [red, green])
            .siz(80, 80, true)
            .loc(rand(W), -100, pods)
            .animate({
              props: { x: String(rand(-100, 100)), y: H + 100 },
              ease: 'linear',
              time: { min: 2, max: 5 },
              call: (target) => {
                target.dispose();
              },
            });
        });

        const paddle = new Rectangle(100, 30, white)
          .centerReg()
          .siz(150, 50, true)
          .pos(0, 40, CENTER, BOTTOM);

        const motion = new MotionController(
          paddle,
          'keydown',
          15,
          HORIZONTAL,
          S
        );

        const label = new Label({
          text: `Your Score: ${playerScore}`,
          size: 50,
          color: white,
          bold: true,
          backgroundColor: purple,
        }).pos(0, 50, CENTER);

        const timer = new Timer({
          time: 0,
          down: false,
          backgroundColor: purple,
          color: white,
        })
          .sca(0.7)
          .pos(50, 50, RIGHT);

        const ticker = Ticker.add(() => {
          // Stop the game after GAME_TIME seconds
          if (timer.time == GAME_TIME) {
            Ticker.remove(ticker);
            inter.clear();
            stopAnimate();
            timer.stop();
            motion.pause();

            const panel = new Panel({
              width: 400,
              height: 250,
              bgColor: new GradientColor([black, dark], 90),
              titleBar: 'GAME OVER',
              draggable: true,
              content: {
                message:
                  "What's your name?\n You will be added to the leaderboard",
                color: lighter,
                display: new TextInput({ placeholder: 'enter name' }).sca(0.7),
                align: CENTER,
                spacingV: 25,
                spacingH: 10,
                buttonScale: 0.5,
                buttons: [
                  {
                    label: 'ENTER',
                    bgColor: new GradientColor([green, blue], 90),
                    width: 300,
                    call: async () => {
                      axios
                        .post('/api/v1/leaderboard', {
                          username: panel.display.text,
                          score: playerScore,
                        })
                        .then((response) => {
                          location.href = '/leaderboard';
                        })
                        .catch((error) => {
                          console.log(error);
                        });
                    },
                  },
                  {
                    label: 'CLEAR',
                    bgColor: new GradientColor([yellow, orange], 90),
                    call: () => {
                      panel.display.text = '';
                    },
                  },
                ],
              },
            }).centerReg();
          }

          // loop to check each pod for hitting paddle
          pods.loop((pod) => {
            if (pod.hitTestCircleRect(paddle)) {
              switch (pod.color) {
                case red:
                  playerScore -= 10;
                  break;
                case green:
                  playerScore += 20;
                  break;
              }

              label.text = 'Your Score: ' + playerScore;

              pod.removeFrom();
            }
          }, true);
        });
      }
    </script>
    <meta name="viewport" content="width=device-width, user-scalable=no" />
  </head>
  <body>
    <div id="game"></div>
  </body>
</html>
