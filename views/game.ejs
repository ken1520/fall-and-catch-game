<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Falling</title>

    <!-- zimjs.com - JavaScript Canvas Framework -->
    <script type="module">
      // import zim from "https://zimjs.org/cdn/016/zim";
      import zim from "https://zimjs.org/cdn/016/zim_game";

      // See Docs under Frame for FIT, FILL, FULL, and TAG
      new Frame(
        FIT,
        1024,
        768,
        light,
        dark,
        ready,
        ["p1.png", "p2.png", "p3.png", "p4.png", "boat.png"],
        "http://localhost:3000/images/"
      );
      function ready() {
        // given F (Frame), S (Stage), W (width), H (height)

        const pods = new Container().addTo().noMouse();

        // ZIM has dynamic parameters called ZIM VEE (launched in version 5)
        // Here we pass a min max object to vary the seconds
        // We store the interval so we can clear it at the end
        const inter = interval({ min: 0.2, max: 0.5 }, () => {
          // Here we pass an array to randomly pick from the colors
          // this is another form of ZIM VEE values
          const pod = new Circle(20, [yellow, red, blue, silver, grey, dark])
            .loc(rand(W), -100, pods) // inside pods container
            .animate({
              // a string value is relative position
              // so animate to left or right 100 from its current x
              // and then off the screen to the bottom
              props: { x: String(rand(-100, 100)), y: H + 100 },
              ease: "linear",
              time: { min: 2, max: 5 },
              call: (target) => {
                // receives what just stopped animating
                target.dispose();
              },
            });
        });

        // PADDLE
        // const paddle = new Rectangle(100, 30, white)
        const paddle = new Pic("boat.png")
          .centerReg()
          .siz(100, 100, true)
          .pos(0, 40, CENTER, BOTTOM);

        // set a speed of 15 and a boundary of the stage, S
        new MotionController(paddle, "keydown", 15, HORIZONTAL, S);

        // INDICATOR
        const indicator = new Indicator({
          fill: true,
          num: 6,
          width: 300,
          selectedIndex: -1,
          indicatorType: "heart",
        }).pos(60, 40, CENTER);

        // TIMER
        // timer needs the ZIM game module
        const timer = new Timer({
          time: 0,
          down: false,
          backgroundColor: purple,
          color: white,
        })
          .sca(0.7)
          .pos(50, 44, RIGHT);

        // HITTEST
        // We store the Ticker function so we can turn it off at the end
        const ticker = Ticker.add(() => {
          // loop to check each pod for hitting paddle
          pods.loop((pod) => {
            // there are a dozen types of hitTests
            if (pod.hitTestCircleRect(paddle)) {
              zog("hit!");

              if (pod.color == red) indicator.selectedIndex++;
              else indicator.selectedIndex--;

              // Check win
              if (indicator.selectedIndex == indicator.num - 1) {
                // win!
                Ticker.remove(ticker);
                inter.clear();
                stopAnimate();
                timer.stop();
                new Pane(
                  "Passion Pods Collected!\n\nTime: " + timer.time,
                  red,
                  white
                ).show(() => {
                  location.reload();
                });
              }

              pod.removeFrom();
            }
          }, true); // loop backwards when removing objects
        });

        //   pod.dispose();
        // }
      } // end ready
    </script>
    <meta name="viewport" content="width=device-width, user-scalable=no" />
  </head>
  <body></body>
</html>
