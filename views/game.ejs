<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Fall and Catch - Game</title>

    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <style>
      #game {
        max-width: 100%;
        height: 100%;
      }
    </style>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- zimjs.com - JavaScript Canvas Framework -->
    <script type="module">
      import zim from "https://zimjs.org/cdn/016/zim_game";

      let playerScore = 0;
      const GAME_TIME = 60;
      const FALLING_OBJECTS = [
        "p1.png",
        "p2.png",
        "p3.png",
        "p4.png",
        "e1.png",
        "e2.png",
      ];

      // See Docs under Frame for FIT, FILL, FIT, and TAG
      new Frame(
        "game",
        null,
        null,
        light,
        dark,
        ready,
        [...FALLING_OBJECTS, "boat.png", "bg1.png"],
        "http://localhost:3000/images/"
      );
      function ready() {
        // background of the game
        new Pic("bg1.png").center();

        // given F (Frame), S (Stage), W (width), H (height)
        const pods = new Container().addTo().noMouse();

        // ZIM has dynamic parameters called ZIM VEE (launched in version 5)
        // Here we pass a min max object to vary the seconds
        // We store the interval so we can clear it at the end
        const inter = interval({ min: 0.2, max: 0.5 }, () => {
          // Here we pass an array to randomly pick from the colors
          // this is another form of ZIM VEE values

          // const pod = new Circle(20, [yellow, red, blue, silver, grey, dark])
          const pod = new Pic(FALLING_OBJECTS[rand(FALLING_OBJECTS.length - 1)])
            .siz(80, 80, true)
            .loc(rand(W), -100, pods) // inside pods container
            .animate({
              // a string value is relative position
              // so animate to left or right 100 from its current x
              // and then off the screen to the bottom
              props: { x: String(rand(-100, 100)), y: H + 100 },
              ease: "linear",
              time: { min: 2, max: 5 },
              call: (target) => {
                // receives what just stopped animating
                target.dispose();
              },
            });
        });

        // PADDLE
        // const paddle = new Rectangle(100, 30, white)
        const paddle = new Pic("boat.png")
          .centerReg()
          .siz(100, 100, true)
          .pos(0, 40, CENTER, BOTTOM);

        // set a speed of 15 and a boundary of the stage, S
        const motion = new MotionController(
          paddle,
          "keydown",
          15,
          HORIZONTAL,
          S
        );

        const label = new Label({
          text: `Your Score: ${playerScore}`,
          size: 50,
          color: white,
          bold: true,
          backgroundColor: purple,
        })
          .pos(0, 50, CENTER)

        // TIMER
        // timer needs the ZIM game module
        const timer = new Timer({
          time: 0,
          down: false,
          backgroundColor: purple,
          color: white,
        })
          .sca(0.7)
          .pos(50, 50, RIGHT);

        // HITTEST
        // We store the Ticker function so we can turn it off at the end
        const ticker = Ticker.add(() => {
          // Stop the game after GAME_TIME seconds
          if (timer.time == GAME_TIME) {
            Ticker.remove(ticker);
            inter.clear();
            stopAnimate();
            timer.stop();
            motion.pause();

            const panel = new Panel({
              width: 400,
              height: 250,
              bgColor: new GradientColor([black, dark], 90),
              titleBar: "GAME OVER",
              draggable: true,
              content: {
                message:
                  "What's your name?\n You will be added to the leaderboard",
                color: lighter, // override default darker
                display: new TextInput({ placeholder: "enter name" }).sca(0.7),
                align: CENTER, // default
                spacingV: 25, // 20 is default
                spacingH: 10, // default
                buttonScale: 0.5, // default
                buttons: [
                  // or just a single button object
                  {
                    label: "ENTER",
                    bgColor: new GradientColor([green, blue], 90),
                    width: 300,
                    call: async () => {
                      axios.post('/api/v1/leaderboard', {
                        username: panel.display.text,
                        score: playerScore,
                      }).then((response) => {
                        location.href = "/leaderboard";
                      }).catch((error) => {
                        console.log(error);
                      });
                    },
                  },
                  {
                    // button:new Button(), // can also specify a custom Button
                    label: "CLEAR",
                    bgColor: new GradientColor([yellow, orange], 90),
                    call: () => {
                      panel.display.text = "";
                    },
                  },
                ],
              },
            }).centerReg();

            // new Button({label:"SUBMIT"}).loc(100, 200).tap(()=>{
            //   zog(input.text); // whatever is typed into the LabelInput
            // });
          }

          // loop to check each pod for hitting paddle
          pods.loop((pod) => {
            // there are a dozen types of hitTests
            if (pod.hitTestCircleRect(paddle)) {
              zog("hit!", pod.item.id);

              if (pod.item.id.startsWith("p")) {
                playerScore += 50;
              } else if (pod.item.id.startsWith("e")) {
                playerScore -= 100;
              }

              label.text = "Your Score: " + playerScore;

              pod.removeFrom();
            }
          }, true); // loop backwards when removing objects
        });

        //   pod.dispose();
        // }
      } // end ready
    </script>
    <meta name="viewport" content="width=device-width, user-scalable=no" />
  </head>
  <body>
    <div id="game"></div>
  </body>
</html>
